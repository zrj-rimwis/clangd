# This creates inc files generated by llvm-tblgen program
#
# Target intentionally left on: X86

TOP_CLUNG=	${.CURDIR}/../../../../contrib/clung
TOP_LLVM=	${TOP_CLUNG}/llvm

.PATH:		${TOP_LLVM}/include/llvm/IR
.PATH:		${TOP_LLVM}/lib/IR
.PATH:		${TOP_LLVM}/lib/Target/X86

CLEANDIRS=	generated llvm clang

TGTS=	X86
TINX=	GenAsmMatcher/-gen-asm-matcher \
	GenAsmWriter/-gen-asm-writer \
	GenCallingConv/-gen-callingconv \
	GenDAGISel/-gen-dag-isel \
	GenDisassemblerTables/-gen-disassembler \
	GenFastISel/-gen-fast-isel \
	GenInstrInfo/-gen-instr-info \
	GenMCCodeEmitter/-gen-emitter \
	GenRegisterInfo/-gen-register-info \
	GenSubtargetInfo/-gen-subtarget
TINX_X86=	\
	${TINX:NGenMCCodeEmitter*} \
	GenAsmWriter1/-gen-asm-writer,-asmwriternum=1

SING1=	clang/Driver/Options.inc \
	llvm/IR/Attributes.inc \
	llvm/IR/Intrinsics.gen \
	generated/AttributesCompatFunc.inc

#SING1=	clang/Driver/Options.inc \
#	llvm/IR/Attributes.inc \
#	llvm/IR/Intrinsics.gen \
#	lib/IR/AttributesCompatFunc.inc

.for T in ${TGTS}
.  for FX in ${TINX_${T}:H}
beforedepend:	generated/${T}${FX}.inc
all:		generated/${T}${FX}.inc
.  endfor
.endfor
beforedepend:	${SING1}
all:		${SING1}
	@echo LLVM block3 complete

TGEN=	${.OBJDIR}/../block2/llvm-tblgen/llvm-tblgen
TGINCS=	-I${TOP_LLVM}/include/llvm/IR \
	-I${TOP_LLVM}/include \
	-I${TOP_LLVM}/lib/Target
TXINCS=	-I${TOP_LLVM}/include \
	-I${TOP_LLVM}/lib/Target

clang/Driver/Options.inc: Options.td ${TGEN}
	test -d ${.TARGET:H} || mkdir -p ${.TARGET:H}
	${TGEN} -gen-opt-parser-defs ${CIOPT} ${.ALLSRC:M*.td} -o ${.TARGET}

llvm/IR/Attributes.inc: Attributes.td ${TGEN}
	test -d ${.TARGET:H} || mkdir -p ${.TARGET:H}
	${TGEN} -gen-attrs ${TGINCS} ${.ALLSRC:M*.td} -o ${.TARGET}

llvm/IR/Intrinsics.gen: Intrinsics.td ${TGEN}
	test -d ${.TARGET:H} || mkdir -p ${.TARGET:H}
	${TGEN} -gen-intrinsic ${TGINCS} ${.ALLSRC:M*.td} -o ${.TARGET}

generated/AttributesCompatFunc.inc: AttributesCompatFunc.td ${TGEN}
	test -d ${.TARGET:H} || mkdir -p ${.TARGET:H}
	${TGEN} -gen-attrs ${TGINCS} ${.ALLSRC:M*.td} -o ${.TARGET}


.for T in ${TGTS}
.  for FX in ${TINX_${T}}
generated/${T}${FX:H}.inc: ${T}.td ${TGEN}
	test -d generated ||  mkdir -p generated
	${TGEN} ${FX:T:S|,| |} ${TXINCS} -I${TOP_LLVM}/lib/Target/${T} \
		${.ALLSRC:M*.td} -o ${.TARGET}
.  endfor
.endfor

# CLANG Generations

.PATH:	${TOP_CLUNG}/include/clang/AST
.PATH:	${TOP_CLUNG}/include/clang/Basic
.PATH:	${TOP_CLUNG}/include/clang/Driver

CGEN=	${.OBJDIR}/../block2/clang-tblgen/clang-tblgen
CXINCS=	-I${TOP_CLUNG}/include \
	-I${TOP_LLVM}/lib/Target
CID1=	${CXINCS} -I${TOP_CLUNG}/include/clang/AST
CID2=	${CXINCS} -I${TOP_CLUNG}/include/clang/Sema
CID3=	${CXINCS} -I${TOP_CLUNG}/include/clang/Basic
CID4=	${CXINCS} -I${TOP_CLUNG}/include/clang/Serialization
CID5=	${CXINCS} -I${TOP_CLUNG}/include/clang/Parse
CIOPT=	${CXINCS} -I${TOP_CLUNG}/include/clang/Driver -I${TOP_LLVM}/include
CXAST=	-I${TOP_CLUNG}/lib/Headers \
        -I${TOP_LLVM}/lib/Target \
        -I${TOP_LLVM}/include
CLX1=	Attrs/-gen-clang-attr-classes/Attr.td \
	AttrImpl/-gen-clang-attr-impl/Attr.td \
	AttrDump/-gen-clang-attr-dump/Attr.td \
	AttrVisitor/-gen-clang-attr-ast-visitor/Attr.td \
	StmtNodes/-gen-clang-stmt-nodes/StmtNodes.td \
	DeclNodes/-gen-clang-decl-nodes/DeclNodes.td \
	CommentNodes/-gen-clang-comment-nodes/CommentNodes.td \
	CommentHTMLTags/-gen-clang-comment-html-tags/CommentHTMLTags.td \
	CommentHTMLTagsProperties/-gen-clang-comment-html-tags-properties/CommentHTMLTags.td \
	CommentHTMLNamedCharacterReferences/-gen-clang-comment-html-named-character-references/CommentHTMLNamedCharacterReferences.td \
	CommentCommandInfo/-gen-clang-comment-command-info/CommentCommands.td \
	CommentCommandList/-gen-clang-comment-command-list/CommentCommands.td
CLX2=	AttrTemplateInstantiate/-gen-clang-attr-template-instantiate/Attr.td \
	AttrParsedAttrList/-gen-clang-attr-parsed-attr-list/Attr.td \
	AttrParsedAttrKinds/-gen-clang-attr-parsed-attr-kinds/Attr.td \
	AttrSpellingListIndex/-gen-clang-attr-spelling-index/Attr.td \
	AttrParsedAttrImpl/-gen-clang-attr-parsed-attr-impl/Attr.td
CLX3=	DiagnosticAnalysisKinds/-gen-clang-diags-defs,-clang-component=Analysis/Diagnostic.td \
	DiagnosticASTKinds/-gen-clang-diags-defs,-clang-component=AST/Diagnostic.td \
	DiagnosticCommentKinds/-gen-clang-diags-defs,-clang-component=Comment/Diagnostic.td \
	DiagnosticCommonKinds/-gen-clang-diags-defs,-clang-component=Common/Diagnostic.td \
	DiagnosticDriverKinds/-gen-clang-diags-defs,-clang-component=Driver/Diagnostic.td \
	DiagnosticFrontendKinds/-gen-clang-diags-defs,-clang-component=Frontend/Diagnostic.td \
	DiagnosticLexKinds/-gen-clang-diags-defs,-clang-component=Lex/Diagnostic.td \
	DiagnosticParseKinds/-gen-clang-diags-defs,-clang-component=Parse/Diagnostic.td \
	DiagnosticSemaKinds/-gen-clang-diags-defs,-clang-component=Sema/Diagnostic.td \
	DiagnosticSerializationKinds/-gen-clang-diags-defs,-clang-component=Serialization/Diagnostic.td \
	DiagnosticGroups/-gen-clang-diag-groups/Diagnostic.td \
	DiagnosticIndexName/-gen-clang-diags-index-name/Diagnostic.td \
	AttrList/-gen-clang-attr-list/Attr.td \
	AttrHasAttributeImpl/-gen-clang-attr-has-attribute-impl/Attr.td \
	arm_neon/-gen-arm-neon-sema/arm_neon.td
CLX4=	AttrPCHRead/-gen-clang-attr-pch-read/Attr.td \
	AttrPCHWrite/-gen-clang-attr-pch-write/Attr.td
CLX5=	AttrParserStringSwitches/-gen-clang-attr-parser-string-switches/Attr.td

.for ZZ in 1/AST 2/Sema 3/Basic 4/Serialization 5/Parse
.  for FX in ${CLX${ZZ:H}:H:H}
beforedepend:	clang/${ZZ:T}/${FX}.inc
all:		clang/${ZZ:T}/${FX}.inc
.  endfor
.  for FX in ${CLX${ZZ:H}}
clang/${ZZ:T}/${FX:H:H}.inc: ${FX:T} ${CGEN}
	test -d ${.TARGET:H} || mkdir -p ${.TARGET:H}
	${CGEN} ${FX:H:T:S|,| |} ${CID${ZZ:H}} ${.ALLSRC:M*.td} -o ${.TARGET}
.  endfor
.endfor

.include <bsd.prog.mk>
